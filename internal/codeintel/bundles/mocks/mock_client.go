// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	client "github.com/sourcegraph/sourcegraph/internal/codeintel/bundles/client"
	"io"
	"sync"
)

// MockClient is a mock impelementation of the Client interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/bundles/client)
// used for unit testing.
type MockClient struct {
	// BundleClientFunc is an instance of a mock function object controlling
	// the behavior of the method BundleClient.
	BundleClientFunc *ClientBundleClientFunc
	// GetUploadFunc is an instance of a mock function object controlling
	// the behavior of the method GetUpload.
	GetUploadFunc *ClientGetUploadFunc
	// SendDBFunc is an instance of a mock function object controlling the
	// behavior of the method SendDB.
	SendDBFunc *ClientSendDBFunc
	// SendUploadFunc is an instance of a mock function object controlling
	// the behavior of the method SendUpload.
	SendUploadFunc *ClientSendUploadFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		BundleClientFunc: &ClientBundleClientFunc{
			defaultHook: func(int) client.BundleClient {
				return nil
			},
		},
		GetUploadFunc: &ClientGetUploadFunc{
			defaultHook: func(context.Context, int, string) (string, error) {
				return "", nil
			},
		},
		SendDBFunc: &ClientSendDBFunc{
			defaultHook: func(context.Context, int, io.Reader) error {
				return nil
			},
		},
		SendUploadFunc: &ClientSendUploadFunc{
			defaultHook: func(context.Context, int, io.Reader) error {
				return nil
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i client.Client) *MockClient {
	return &MockClient{
		BundleClientFunc: &ClientBundleClientFunc{
			defaultHook: i.BundleClient,
		},
		GetUploadFunc: &ClientGetUploadFunc{
			defaultHook: i.GetUpload,
		},
		SendDBFunc: &ClientSendDBFunc{
			defaultHook: i.SendDB,
		},
		SendUploadFunc: &ClientSendUploadFunc{
			defaultHook: i.SendUpload,
		},
	}
}

// ClientBundleClientFunc describes the behavior when the BundleClient
// method of the parent MockClient instance is invoked.
type ClientBundleClientFunc struct {
	defaultHook func(int) client.BundleClient
	hooks       []func(int) client.BundleClient
	history     []ClientBundleClientFuncCall
	mutex       sync.Mutex
}

// BundleClient delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) BundleClient(v0 int) client.BundleClient {
	r0 := m.BundleClientFunc.nextHook()(v0)
	m.BundleClientFunc.appendCall(ClientBundleClientFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BundleClient method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBundleClientFunc) SetDefaultHook(hook func(int) client.BundleClient) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BundleClient method of the parent MockClient instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBundleClientFunc) PushHook(hook func(int) client.BundleClient) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientBundleClientFunc) SetDefaultReturn(r0 client.BundleClient) {
	f.SetDefaultHook(func(int) client.BundleClient {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientBundleClientFunc) PushReturn(r0 client.BundleClient) {
	f.PushHook(func(int) client.BundleClient {
		return r0
	})
}

func (f *ClientBundleClientFunc) nextHook() func(int) client.BundleClient {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBundleClientFunc) appendCall(r0 ClientBundleClientFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBundleClientFuncCall objects
// describing the invocations of this function.
func (f *ClientBundleClientFunc) History() []ClientBundleClientFuncCall {
	f.mutex.Lock()
	history := make([]ClientBundleClientFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBundleClientFuncCall is an object that describes an invocation of
// method BundleClient on an instance of MockClient.
type ClientBundleClientFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 client.BundleClient
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBundleClientFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBundleClientFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientGetUploadFunc describes the behavior when the GetUpload method of
// the parent MockClient instance is invoked.
type ClientGetUploadFunc struct {
	defaultHook func(context.Context, int, string) (string, error)
	hooks       []func(context.Context, int, string) (string, error)
	history     []ClientGetUploadFuncCall
	mutex       sync.Mutex
}

// GetUpload delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetUpload(v0 context.Context, v1 int, v2 string) (string, error) {
	r0, r1 := m.GetUploadFunc.nextHook()(v0, v1, v2)
	m.GetUploadFunc.appendCall(ClientGetUploadFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUpload method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetUploadFunc) SetDefaultHook(hook func(context.Context, int, string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUpload method of the parent MockClient instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetUploadFunc) PushHook(hook func(context.Context, int, string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientGetUploadFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientGetUploadFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int, string) (string, error) {
		return r0, r1
	})
}

func (f *ClientGetUploadFunc) nextHook() func(context.Context, int, string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetUploadFunc) appendCall(r0 ClientGetUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetUploadFuncCall objects describing
// the invocations of this function.
func (f *ClientGetUploadFunc) History() []ClientGetUploadFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetUploadFuncCall is an object that describes an invocation of
// method GetUpload on an instance of MockClient.
type ClientGetUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSendDBFunc describes the behavior when the SendDB method of the
// parent MockClient instance is invoked.
type ClientSendDBFunc struct {
	defaultHook func(context.Context, int, io.Reader) error
	hooks       []func(context.Context, int, io.Reader) error
	history     []ClientSendDBFuncCall
	mutex       sync.Mutex
}

// SendDB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) SendDB(v0 context.Context, v1 int, v2 io.Reader) error {
	r0 := m.SendDBFunc.nextHook()(v0, v1, v2)
	m.SendDBFunc.appendCall(ClientSendDBFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendDB method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSendDBFunc) SetDefaultHook(hook func(context.Context, int, io.Reader) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendDB method of the parent MockClient instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientSendDBFunc) PushHook(hook func(context.Context, int, io.Reader) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientSendDBFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, io.Reader) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientSendDBFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, io.Reader) error {
		return r0
	})
}

func (f *ClientSendDBFunc) nextHook() func(context.Context, int, io.Reader) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSendDBFunc) appendCall(r0 ClientSendDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSendDBFuncCall objects describing the
// invocations of this function.
func (f *ClientSendDBFunc) History() []ClientSendDBFuncCall {
	f.mutex.Lock()
	history := make([]ClientSendDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSendDBFuncCall is an object that describes an invocation of method
// SendDB on an instance of MockClient.
type ClientSendDBFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 io.Reader
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSendDBFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSendDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientSendUploadFunc describes the behavior when the SendUpload method of
// the parent MockClient instance is invoked.
type ClientSendUploadFunc struct {
	defaultHook func(context.Context, int, io.Reader) error
	hooks       []func(context.Context, int, io.Reader) error
	history     []ClientSendUploadFuncCall
	mutex       sync.Mutex
}

// SendUpload delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) SendUpload(v0 context.Context, v1 int, v2 io.Reader) error {
	r0 := m.SendUploadFunc.nextHook()(v0, v1, v2)
	m.SendUploadFunc.appendCall(ClientSendUploadFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendUpload method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSendUploadFunc) SetDefaultHook(hook func(context.Context, int, io.Reader) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendUpload method of the parent MockClient instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSendUploadFunc) PushHook(hook func(context.Context, int, io.Reader) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientSendUploadFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, io.Reader) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientSendUploadFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, io.Reader) error {
		return r0
	})
}

func (f *ClientSendUploadFunc) nextHook() func(context.Context, int, io.Reader) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSendUploadFunc) appendCall(r0 ClientSendUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSendUploadFuncCall objects describing
// the invocations of this function.
func (f *ClientSendUploadFunc) History() []ClientSendUploadFuncCall {
	f.mutex.Lock()
	history := make([]ClientSendUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSendUploadFuncCall is an object that describes an invocation of
// method SendUpload on an instance of MockClient.
type ClientSendUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 io.Reader
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSendUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSendUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
